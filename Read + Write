#include <SPI.h>
#include <mcp_can.h>

#define CS_Pin 10        // Chip Select pin for MCP2515
#define INTRPT_Pin 9     // Interrupt pin for MCP2515 (if used)
float voltage;
float coolTemp;
float engnSpeed;
float wheelSpeed;
bool can_start = true;

// Create MCP_CAN object for CS pin
MCP_CAN CAN(CS_Pin);

// Setup function
void setup() {
  // Initialize Serial for debugging
  Serial.begin(9600);
  while (!Serial);

  // Initialize CAN at 250 kbps
  if (CAN.begin(MCP_ANY, CAN_250KBPS, MCP_8MHZ) == CAN_OK) {
    Serial.println("CAN Initialized Successfully!");
    CAN.setMode(MCP_NORMAL);  // Set CAN to normal mode for receiving
    can_start = true;
  } else {
    Serial.println("Error Initializing CAN...");
    can_start = false;
    while (1);  // Hang if initialization fails
  }
}

void loop() {
  // Re-attempt initialization if CAN fails
  if (!can_start) {
    if (CAN.begin(MCP_ANY, CAN_250KBPS, MCP_8MHZ) == CAN_OK) {
      Serial.println("CAN Re-initialized Successfully!");
      CAN.setMode(MCP_NORMAL);
      can_start = true;
    }
  }

  // Check for incoming CAN messages
  if (CAN.checkReceive() == CAN_MSGAVAIL) {
    readCANMessage();  // Process the incoming message
  } else {
    Serial.println("No CAN message available");
  }

  // Send data to dashboard
  sendToDashboard();
  
  delay(1000);  // Delay to prevent flooding
}

// Function to read and process incoming CAN messages
void readCANMessage() {
  long unsigned int rxId;
  unsigned char len = 0;
  unsigned char buf[8];

  CAN.readMsgBuf(&rxId, &len, buf);  // Read CAN message

  // Process CAN message based on ID
  if (rxId == 0x701) {
    voltage = extractFloatFromBuffer(buf);
  } else if (rxId == 0x700) {
    coolTemp = extractFloatFromBuffer(buf);
  } else if (rxId == 0x702) {
    engnSpeed = extractFloatFromBuffer(buf) / 6;  // Convert engine speed
    Serial.print("Engine Speed (RPM): ");
    Serial.println(engnSpeed); // Debug output for RPM
  } else if (rxId == 0x703) {
    wheelSpeed = extractFloatFromBuffer(buf);
  }
}


// Helper function to convert CAN buffer to float
float extractFloatFromBuffer(unsigned char* buf) {
  union {
    uint32_t bits;
    float number;
  } data;

  data.bits = 0;
  for (int i = 0; i < 4; i++) {
    data.bits = (data.bits << 8) | buf[i];
  }
  return data.number;
}

// Function to send data to dashboard
void sendToDashboard() {
  // RPM
  int RPMVal = engnSpeed / 100;
  if (RPMVal <= 100) {
    Serial1.print("p1.val=" + String(RPMVal)); Serial1.write(0xff); Serial1.write(0xff); Serial1.write(0xff);
    Serial1.print("p2.val=0"); Serial1.write(0xff); Serial1.write(0xff); Serial1.write(0xff);
  } else {
    int RPMP2 = (RPMVal % 100) * 100 / 35;
    int RPMP1 = RPMVal - RPMP2;
    Serial1.print("p1.val=" + String(RPMP1)); Serial1.write(0xff); Serial1.write(0xff); Serial1.write(0xff);
    Serial1.print("p2.val=" + String(RPMP2)); Serial1.write(0xff); Serial1.write(0xff); Serial1.write(0xff);
  }

  // Coolant Temp
  int CoolVal = coolTemp;
  Serial1.print("coolant.val=" + String(CoolVal)); Serial1.write(0xff); Serial1.write(0xff); Serial1.write(0xff);

  // Fan
  String FanVal = "\"ON\""; // Options: "\"ON\"", "\"OFF\""
  Serial1.print("fan.txt=" + FanVal); Serial1.write(0xff); Serial1.write(0xff); Serial1.write(0xff);

  // Battery
  Serial1.print("battery.val=" + String(voltage)); Serial1.write(0xff); Serial1.write(0xff); Serial1.write(0xff);

  // Gear
  String GearVal = "\"1\""; // Options: "\"N\"" or "\"i\"" where i = 0,1,2,3,4,5,6
  Serial1.print("gear.txt=" + GearVal); Serial1.write(0xff); Serial1.write(0xff); Serial1.write(0xff);

  // Traction Control
  int TCVal = 0; // Options: 0 = OFF, 1 = ON
  Serial1.print("tc.val=" + String(TCVal)); Serial1.write(0xff); Serial1.write(0xff); Serial1.write(0xff);

  // Launch Control
  int LCVal = 0; // Options: 0 = OFF, 1 = ON
  Serial1.print("lc.val=" + String(LCVal)); Serial1.write(0xff); Serial1.write(0xff); Serial1.write(0xff);

  // Debugging output
  Serial.print("Battery: " + String(voltage) + "V, ");
  Serial.print("Coolant Temp: " + String(coolTemp) + "C, ");
  Serial.print("Engine Speed: " + String(engnSpeed) + " RPM, ");
  Serial.print("Wheel Speed: " + String(wheelSpeed) + " kph\n");
}
