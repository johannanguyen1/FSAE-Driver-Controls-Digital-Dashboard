// Dashboard 2025 Code

#include <mcp_can.h>  // necessary for CAN Protocol communication commands
#include <SPI.h>      // necessary for serial communication between the SPI devices and the MicroController

// Define the pins between the MCP2515 Board and the MicroController
#define CS_Pin 10
#define INTRPT_Pin 9  // or 0

// Variables for data metrics
float voltage;
float coolTemp;
unsigned int engnSpeed;  // RPM will be stored here as an integer
unsigned int gear;
float wheelSpeed;

// Flag to indicate CAN initialization
bool can_initialized = false;

// Create an instance of MCP_CAN with the CS pin
MCP_CAN CAN(CS_Pin);

void setup() {
  // Input and Output pin setups
  pinMode(CS_Pin, OUTPUT);
  pinMode(INTRPT_Pin, INPUT);

  // Initialize Serial for debugging
  Serial1.begin(9600);
  // while (!Serial);
  // Serial.println("CAN Receiver Callback");

  // Start the CAN bus at 250 kbps (using MCP_CAN's specific start command)
  if (CAN.begin(MCP_ANY, CAN_250KBPS, MCP_8MHZ) == CAN_OK) {
    // Serial.println("CAN Started");
    can_initialized = true;
  } else {
    // Serial.println("Starting CAN failed!");
    while (1);  // Stop if CAN initialization fails
  }

  // Set CAN mode to normal operation
  CAN.setMode(MCP_NORMAL);
  delay(1000);

}


void loop() {
  // Check for new CAN messages
  if (CAN.checkReceive() == CAN_MSGAVAIL) {
    receiveCANMessage();
  }

  // CAN re-initialization logic (if needed)
  if (!can_initialized) {
    // Serial.println("Attempting to restart CAN...");
    if (CAN.begin(MCP_ANY, CAN_250KBPS, MCP_8MHZ) == CAN_OK) {
      // Serial.println("CAN Restarted");
      can_initialized = true;
    } else {
      // Serial.println("CAN Restart failed");
      delay(1000);  // Wait before retrying
    }
  }

  // NOTE: Make sure these are the ONLYYYYYY print statements
  // NOTE: Make sure you are printing for ALLLLL objects on the Nextion Display, even if its only 0
  // If it doesn't work:
  // Serial1 --> Serial
  // write --> print
  // Correct way to send data to Nextion display:

// Send RPM value (make sure engnSpeed is already updated)

  
  // Only print gear if the object has been created in the Nextion Editor Software
  // Serial1.print("gear.val=" + String(gear)); Serial1.write(0xff); Serial1.write(0xff); Serial1.write(0xff);

}

void receiveCANMessage() {
  unsigned long canId;
  unsigned char len = 0;
  unsigned char buf[8];

  CAN.readMsgBuf(&canId, &len, buf);

  if (canId == 0x702) {  // Assuming 0x702 is the CAN ID for RPM data
      engnSpeed = extractFloatFromBuffer(buf);  // Convert to 16-bit integer for RPM
      engnSpeed = engnSpeed / 6;
      // Serial.print("Engine Speed (RPM): ");
      // Serial.println(engnSpeed);  // Print the RPM value
      Serial1.print("rpm.val=");  // Command for setting the RPM value in Nextion object
      Serial1.print(engnSpeed);    // Send the RPM value as a number
      Serial1.write(0xFF);         // End of command sequence
      Serial1.write(0xFF);
      Serial1.write(0xFF);

      // Send text to rpmText (this is assuming 'rpmText' is a text box on Nextion)
      Serial1.print("rpmText.txt=\"poo\""); // Set the text to "poo"
      Serial1.write(0xFF);         // End of command sequence
      Serial1.write(0xFF);
      Serial1.write(0xFF);

      
      // Extract gear ratio (assuming it starts at byte 4)
      // This is for reading from MoTec! Testing on 11/14 is using direct gear sensor 
      // gearRatio = extractFloatFromBuffer(&buf[4]);  // Extract the gear ratio starting from byte 4
      // Serial.print("Gear Ratio: ");
      // Serial.println(gearRatio);  // Print the gear ratio value
  }
  // else if (canId == 0x700) {  // Coolant Temperature CAN ID
  //   memcpy(&coolTemp, buf, sizeof(float));
  //   Serial.print("Coolant Temperature: ");
  //   Serial.println(coolTemp);
  // }
  // else if (canId == 0x701) {  // Voltage CAN ID
  //   memcpy(&voltage, buf, sizeof(float));
  //   Serial.print("Voltage: ");
  //   Serial.println(voltage);
  // }
  // else if (canId == 0x648) {  // Wheel Speed CAN ID
  //   memcpy(&wheelSpeed, buf, sizeof(float));
  //   Serial.print("Wheel Speed: ");
  //   Serial.println(wheelSpeed);
  // } else {
  //     Serial.println("Unexpected CAN ID or message length");
  // }

  // Serial.println();

  handleGearSensor();
}

// Helper function to convert CAN buffer to float
float extractFloatFromBuffer(unsigned char* buf) {
  union {
    uint32_t bits;
    float number;
  } data;

  data.bits = (buf[0] << 24) | (buf[1] << 16) | (buf[2] << 8) | buf[3];
  return data.number;
}

// Helper function to convert and print gear sensor reading into gear output
void handleGearSensor() {
  // Serial.println(analogRead(A9));

  int gearSensor = analogRead(A9);
  if (gearSensor >= 0 && gearSensor < 170) {
    gear = 1;
  } else if (gearSensor >= 170 && gearSensor < 340) {
    gear = 2;
  } else if (gearSensor >= 340 && gearSensor < 510) {
    gear = 3;
  } else if (gearSensor >= 510 && gearSensor < 680) {
    gear = 4;
  } else if (gearSensor >= 680 && gearSensor < 850) {
    gear = 5;
  } else if (gearSensor >= 850 && gearSensor <= 1023) {
    gear = 6;
  } else {
    gear = 0; // Default to 0 for invalid readings
  }
  
  Serial1.print("gear.val=");  // Command for setting the Gear value in Nextion object
  Serial1.print(gear);         // Send the Gear value as a number
  Serial1.write(0xFF);         // End of command sequence
  Serial1.write(0xFF);
  Serial1.write(0xFF);

  // Send text to gearText (this is assuming 'gearText' is a text box on Nextion)
  Serial1.print("gearText.txt=\"pee\""); // Set the text to "pee"
  Serial1.write(0xFF);         // End of command sequence
  Serial1.write(0xFF);
  Serial1.write(0xFF);

}
